{"version":3,"file":"static/js/155.184e19ce.chunk.js","mappings":"+JAIA,MAoFA,EApFsBA,KACpB,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAS,GAU/CG,EAAWA,CAACC,EAAIC,EAAIC,EAAIC,EAAIC,KACzB,CAAEH,KAAIC,KAAIC,KAAIC,OAGjBC,EAAYA,CAACL,EAAIC,EAAIC,EAAIC,EAAIC,EAAIE,KACrC,GAAc,IAAVA,EACF,MAAO,CAACP,EAASC,EAAIC,EAAIC,EAAIC,EAAIC,IAGnC,MAAMG,EAAKJ,EAAKF,EACVO,EAAKJ,EAAKF,EAEVO,EAAKR,EAAKM,EAAK,EACfG,EAAKR,EAAKM,EAAK,EAEfG,EAAKV,EAAMM,EAAK,EAAMC,EAAKI,KAAKC,KAAK,GAAM,EAC3CC,EAAKZ,EAAMM,EAAK,EAAMD,EAAKK,KAAKC,KAAK,GAAM,EAE3CE,EAAKd,EAAM,EAAIM,EAAM,EACrBS,EAAKd,EAAM,EAAIM,EAAM,EAG3B,MAAO,IACFH,EAAUL,EAAIC,EAAIC,EAAIO,EAAIC,EAAIJ,EAAQ,MACtCD,EAAUL,EAAIS,EAAIC,EAAIC,EAAIG,EAAIR,EAAQ,MACtCD,EAAUL,EAAIW,EAAIG,EAAIC,EAAIC,EAAIV,EAAQ,MACtCD,EAAUL,EAAIe,EAAIC,EAAIb,EAAIC,EAAIE,EAAQ,GAC1C,EAGGW,EAAoBjB,IACxB,MAAMkB,EAAO,IACPC,EAAUP,KAAKC,KAAK,GAAK,EAAKK,EAG9BE,EAAYf,EAAUL,EAAI,GAAImB,EAAS,GAAID,IAAWC,EAAS,GA5CtD,GA6CTE,EAAYhB,EAAUL,EAAIkB,IAAWC,EAAS,GAAID,IAAe,GA7CxD,GA8CTI,EAAYjB,EAAUL,EAAIkB,IAAe,GAAI,GAAIC,EAAS,GA9CjD,GAiDfxB,EAAY,IAAIyB,KAAcC,KAAcC,GAAW,GAGzDC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWC,aAAY,KACvB5B,EAAiBH,EAASgC,OAC5B5B,GAAmB6B,GAASA,EAAO,IAEnCC,cAAcJ,EAChB,GAzDU,IA4DZ,MAAO,IAAMI,cAAcJ,EAAS,GACnC,CAAC3B,EAAgBH,EAASgC,OA7Df,KA6Ed,OAAOG,EAAAA,EAAAA,KAACC,IAAM,CAACC,MA3EDA,CAAC/B,EAAIgC,KACjBhC,EAAGiC,aAAa,IAAK,KAAKC,OAAOF,GACjChC,EAAGmC,WAAW,IAAK,GACnBlB,EAAiBjB,EAAG,EAwEOoC,KAdfpC,IAEZ,MAAMqC,EAAkBC,iBAAiBC,SAASC,iBAAiBC,iBAAiB,oBAC9EC,EAAiB1C,EAAG2C,SAASN,EAAgBO,MAAM,KAAKC,IAAIC,SAKlE,GAJA9C,EAAG+C,OAAOL,GACV1C,EAAGgD,aAAa,GAGZnD,EAAiBH,EAASgC,OAAQ,CACpC,MAAM,GAAEzB,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,GAAOV,EAASG,GACpCG,EAAGiD,KAAKhD,EAAIC,EAAIC,EAAIC,EACtB,IAGyC,C","sources":["KochSnowflake.js"],"sourcesContent":["// src/KochSnowflake.js\nimport React, { useState, useEffect } from 'react';\nimport Sketch from 'react-p5';\n\nconst KochSnowflake = () => {\n  const [segments, setSegments] = useState([]);\n  const [currentSegment, setCurrentSegment] = useState(0);\n  const maxDepth = 4; // Maximum depth for the snowflake\n  const speed = 20; // Speed of drawing in milliseconds\n\n  const setup = (p5, canvasParentRef) => {\n    p5.createCanvas(400, 400).parent(canvasParentRef);\n    p5.background(255, 0);\n    generateSegments(p5);\n  };\n\n  const drawLine = (p5, x1, y1, x2, y2) => {\n    return { x1, y1, x2, y2 };\n  };\n\n  const kochCurve = (p5, x1, y1, x2, y2, depth) => {\n    if (depth === 0) {\n      return [drawLine(p5, x1, y1, x2, y2)];\n    }\n\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n\n    const xA = x1 + dx / 3;\n    const yA = y1 + dy / 3;\n\n    const xB = x1 + (dx / 2) - (dy * Math.sqrt(3)) / 6;\n    const yB = y1 + (dy / 2) + (dx * Math.sqrt(3)) / 6;\n\n    const xC = x1 + (2 * dx) / 3;\n    const yC = y1 + (2 * dy) / 3;\n\n    // Recursively get the segments\n    return [\n      ...kochCurve(p5, x1, y1, xA, yA, depth - 1),\n      ...kochCurve(p5, xA, yA, xB, yB, depth - 1),\n      ...kochCurve(p5, xB, yB, xC, yC, depth - 1),\n      ...kochCurve(p5, xC, yC, x2, y2, depth - 1),\n    ];\n  };\n\n  const generateSegments = (p5) => {\n    const size = 300; // Size for the snowflake\n    const height = (Math.sqrt(3) / 2) * size;\n\n    // Generate segments for the three sides of the snowflake\n    const segments1 = kochCurve(p5, 50, height + 50, size + 50, height + 50, maxDepth);\n    const segments2 = kochCurve(p5, size + 50, height + 50, size / 2 + 50, 50, maxDepth);\n    const segments3 = kochCurve(p5, size / 2 + 50, 50, 50, height + 50, maxDepth);\n\n    // Combine all segments\n    setSegments([...segments1, ...segments2, ...segments3]);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (currentSegment < segments.length) {\n        setCurrentSegment((prev) => prev + 1); // Move to the next segment\n      } else {\n        clearInterval(interval); // Stop the interval when done\n      }\n    }, speed);\n\n    return () => clearInterval(interval); // Cleanup on unmount\n  }, [currentSegment, segments.length, speed]);\n\n  const draw = (p5) => {\n    // Get colors based on the current theme\n    const foregroundColor = getComputedStyle(document.documentElement).getPropertyValue('--foreground-rgb');\n    const snowflakeColor = p5.color(...foregroundColor.split(',').map(Number));\n    p5.stroke(snowflakeColor);\n    p5.strokeWeight(1);\n\n    // Draw the current segment\n    if (currentSegment < segments.length) {\n      const { x1, y1, x2, y2 } = segments[currentSegment];\n      p5.line(x1, y1, x2, y2);\n    }\n  };\n\n  return <Sketch setup={setup} draw={draw} />;\n};\n\nexport default KochSnowflake;\n"],"names":["KochSnowflake","segments","setSegments","useState","currentSegment","setCurrentSegment","drawLine","p5","x1","y1","x2","y2","kochCurve","depth","dx","dy","xA","yA","xB","Math","sqrt","yB","xC","yC","generateSegments","size","height","segments1","segments2","segments3","useEffect","interval","setInterval","length","prev","clearInterval","_jsx","Sketch","setup","canvasParentRef","createCanvas","parent","background","draw","foregroundColor","getComputedStyle","document","documentElement","getPropertyValue","snowflakeColor","color","split","map","Number","stroke","strokeWeight","line"],"sourceRoot":""}